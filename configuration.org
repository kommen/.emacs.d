* Package Management
This configuration assumes that you installed cask via homebrew.
If you installed cask via curl you might need to change the past to “~/.cask/cask.el”.\ In order to install cask and pallet follow the Installation section on https://github.com/rdallasgray/pallet.

After you installed cask visit your “~/.emacs.d” directory and run cask install in it.
Now just start emacs and you’re all set.\ Every package you will install via package-list or package-install will be automatically added to your Cask file as a dependency of your configuration.

Run `cask install` to install required packages

#+BEGIN_SRC emacs-lisp
  (require 'cask "/usr/local/Cellar/cask/0.8.1/cask.el")
  (cask-initialize)

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/") t)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
#+END_SRC

#+RESULTS:
: t

* Core Emacs
#+BEGIN_SRC emacs-lisp
  (server-start)

  (setq gc-cons-threshold 50000000)
  (setq vc-handled-backends nil)

  (tool-bar-mode -1)
  (global-linum-mode 1)

  (global-eldoc-mode -1)
  (global-company-mode -1)

  (load-theme 'material t)

  (global-auto-revert-mode t)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta))


(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed 3)
#+END_SRC

#+RESULTS:
: meta

* Tabs
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

#+RESULTS:
: 2

* Projectile

#+BEGIN_SRC emacs-lisp
  (require 'projectile)

  (add-to-list 'projectile-globally-ignored-directories "*/priv")
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (global-set-key (kbd "M-t") 'projectile-find-file)
  (setq projectile-enable-caching t)
  (projectile-global-mode)

#+END_SRC

#+RESULTS:
: t

* Org Mode

Syntax highlighting in code snippets

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

Make windmove work in org-mode where it does not have special org-mode meaning. See the discussion here to read the full story.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

* Window Management

Navigate between windows using Alt-1, Alt-2, Shift-left, shift-up, shift-right

Also use M-o to switch to the next window

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

You can use C-c left or C-c right to switch to the prev or next window configuration. This is very useful when you want to focus on one single buffer but want to go back to your old more complex window configuration.

#+BEGIN_SRC emacs-lisp
(winner-mode t)
#+END_SRC

* The Mess

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)

  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)


  (defun save-all ()
    (interactive)
    (save-some-buffers t))
  (add-hook 'focus-out-hook 'save-all)

  (setq auto-save-default nil)
  (setq backup-inhibited t)
  (setq ring-bell-function 'ignore)
  (setq default-truncate-lines t)
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
  (setq css-indent-offset 2)

  (defvaralias 'c-basic-offset 'tab-with)

  (defun kommen-new-empty-buffer ()
    "Create a new empty buffer.
  New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc."
    (interactive)
    (let ((-buf (generate-new-buffer "untitled")))
      (switch-to-buffer -buf)
      (funcall initial-major-mode)
      (setq buffer-offer-save t)))

    (global-set-key (kbd "C-x n") 'kommen-new-empty-buffer)

  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
              pretty-parens  ; different paren styles for different modes.
              smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
              smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)

      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
     (setq parinfer-auto-switch-indent-mode nil)))

  (use-package smartparens-config
    :ensure smartparens
    :bind
    (("M-<up>" . sp-up-sexp)))

  (require 'smartparens-clojure)
  (sp-local-pair 'clojure-mode "{" nil :unless '(sp-in-string-p))
  (sp-local-pair 'clojure-mode "[" nil :unless '(sp-in-string-p))
  (sp-local-pair 'clojure-mode "(" nil :unless '(sp-in-string-p))

  (add-hook 'clojure-mode-hook #'smartparens-strict-mode)
  (add-hook 'clojure-mode-hook #'dumb-jump-mode)

  (global-set-key (kbd "M-x") 'counsel-M-x)

  (setq show-paren-delay 0)
  (show-paren-mode 1)


  (require 'neotree)

  (global-set-key (kbd "M-\\") 'neotree-toggle)
  (global-set-key [f8] 'neotree-toggle)

  (setq neo-smart-open 1)

  (winner-mode t)

  ;; custom themes
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  (when (file-exists-p "~/.emacs.d/customizations.el")
    (load "~/.emacs.d/customizations.el"))

  (load "~/.emacs.d/smartparens.el")
  (add-hook 'css-mode-hook #'smartparens-strict-mode)

#+END_SRC

#+RESULTS:
| smartparens-strict-mode |


** Packages
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :config
    (setq guide-key/guide-key-sequence t)
    (guide-key-mode 1))

#+END_SRC

#+RESULTS:
: t

* Ivy, Counsel Swipe
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

#+RESULTS:

** Better completion wity ivy, swiper and counsel
*** Ivy
Better replacement for ~ido-mode~ as the completion system.
For more information see http://oremacs.com/2015/04/16/ivy-mode/
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :defer 2
    :diminish t
    :config
    (ivy-mode 1))
#+END_SRC
*** Counsel
~ivy-mode~ ensures that any Emacs command using ~completing-read-function~ uses ivy for completion.
Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of ivy.
For example, ~counsel-find-file~ has some additional keybindings. Pressing ~DEL~ will move you to the parent directory.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :defer 2
    :bind (("C-x C-f" . counsel-find-file)))
#+END_SRC
#+RESULTS:
*** Counsel Projectile
~counsel-projectile~ adds counsel goodness to some projectile commands from projectile-find-file to projectile-ag.
See the full list at https://github.com/ericdanan/counsel-projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :defer 2
    :config
    (counsel-projectile-on))
#+END_SRC
*** Counsel OSX App
With ~counsel-osx-app~ you can start macOS Applications from within emacs using M-x counsel-osx-app.
https://github.com/d12frosted/counsel-osx-app
#+BEGIN_SRC emacs-lisp
  (use-package counsel-osx-app
    :defer 3)
#+END_SRC
*** Swiper for better isearch
Replacement for isearch. It's awesome.
You can get a really good overview in the minibuffer.
For more information see https://github.com/abo-abo/swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper))
#+END_SRC
* Clojure customizations
#+BEGIN_SRC emacs-lisp

  (use-package cider
    :ensure t)

  (use-package ac-cider)


  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)))

  (add-hook 'clojure-mode-hook
                  (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

  (defun cljfmt-region (pmin pmax)
    (interactive "r")
    (call-process-region pmin pmax
                             "cljfmt"
                             t t))

  (defun cljfmt-buffer ()
    (interactive)
    (cljfmt-region (point-min) (point-max)))

#+END_SRC

#+RESULTS:
=cljfmt-buffer
=* Elixir
#+BEGIN_SRC emacs-lisp
(use-package alchemist)
#+END_SRC

#+RESULTS:

* Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-save-repository-buffers t)
#+END_SRC

#+RESULTS:
: t

* Git Timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC

#+RESULTS:
* Java
#+BEGIN_SRC emacs-lisp
    ;;; c mode configuration
    (defconst kommen-c-style
      '((c-tab-always-indent        . t)
        (c-basic-offset . 2)
        (c-ignore-auto-fill . nil)
        (c-comment-only-line-offset . (0 . 0))
        (c-hanging-braces-alist     . ((substatement-open after before)
                                       (brace-list-open)))
        (c-hanging-colons-alist     . ((member-init-intro before)
                                       (inher-intro)
                                       (case-label after)
                                       (label after)
                                       (access-label after)))
        (c-cleanup-list             . (scope-operator
                                       empty-defun-braces
                                       defun-close-semi))
        (c-offsets-alist . ((knr-argdecl-intro . 5)
                            (arglist-intro . ++)
                            (arglist-close . c-lineup-close-paren)
                            (inclass . +)
                            (member-init-intro . +)
                            (statement-block-intro . +)
                            (defun-block-intro . +)
                            (substatement-open . 0)
                            (label . 0)
                            (statement-case-open . +)
                            (statement-case-intro . +)
                            (case-label . 0)
                            (statement-cont . c-lineup-math)
                            (inline-open . 0)
                            (brace-list-open . +)
                            (topmost-intro-cont . 0)
                            (c . 1) ; "c" for continue of comment, not "c
                                    ; programming language"
                            ))
        (c-special-indent-hook . c-gnu-impose-minimum)
        (c-block-comment-prefix . "lgf: ")
        (c-comment-prefix-regexp . ((awk-mode . "#+(lgf: )?")
                                    (other ."lgf: \\|//+\\|\\**")))
        ;; go to this file and test if c block comments works
        ;; [[file:./patches/comments-test.c]]
        (c-echo-syntactic-information-p . t))
      "kommen's C/Java Programming Style")
    (c-add-style "kommen" kommen-c-style nil)

  (add-hook 'java-mode-hook
                             (lambda ()
                                   (c-set-style "kommen")
                                   (c-toggle-hungry-state 1)
                                   (hs-minor-mode 1)
                                   (turn-on-cwarn-mode)
                                   (indent-tabs-mode nil)))


#+END_SRC

#+RESULTS:
| lambda | nil | (c-set-style kommen)                                   | (c-toggle-hungry-state 1) | (hs-minor-mode 1) | (turn-on-cwarn-mode) | (indent-tabs-mode nil) |
| lambda | nil | (c-set-style lgfang)                                   | (c-toggle-hungry-state 1) | (hs-minor-mode 1) | (turn-on-cwarn-mode) |                        |
| lambda | nil | (setq c-basic-offset 2 tab-width 2 indent-tabs-mode t) |                           |                   |                      |                        |
